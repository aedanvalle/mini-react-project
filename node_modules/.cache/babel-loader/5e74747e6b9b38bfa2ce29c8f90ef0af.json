{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/theorder/Desktop/simple-calc/src/App.js\";\n\n/*\n  this will allow me to utilize the component functionality for when everything is \n  being rendered to the screen\n*/\nimport React, { Component } from 'react';\n/*\n  contains extra styling for this application\n*/\n\nimport './App.css';\n/*\n  importing the answer functionality that will be utilized for rendering the \n  result from the computattion\n*/\n\nimport ResultCom from './components/ResultCom';\n/*\n  This is the physical calculator that is rendered to the screen\n*/\n\nimport Calculator from './components/Calculator';\n/*\n  Rather than having a design that is functional \n*/\n\nclass App extends Component {\n  constructor() {\n    super();\n    /*this sets the state for the answer that will be computed \n      by the calculator*/\n\n    this.onClick = button => {\n      if (button === \"=\") {\n        this.compute(); // this takes the current equation with numbers \n        // and performs the operation\n      } else if (button === \"C\") {\n        this.reset();\n        /*this function call to reset*/\n      } else if (button === \"CE\") {\n        this.backspace();\n        /*this function call to reset*/\n      } else {\n        this.setState({\n          /* this takes the value of the answer in its state \n              places it into the new state*/\n          answer: this.state.answer + button\n        });\n      }\n    };\n\n    this.compute = () => {\n      try {\n        this.setState({\n          answer: (eval(this.state.answer) || \"\") + \"\"\n        });\n      } catch (e) {\n        this.setState({\n          answer: \"error\"\n        });\n      }\n    };\n\n    this.reset = () => {\n      this.setState({\n        answer: \"\"\n      });\n    };\n\n    this.backspace = () => {\n      this.setState({\n        answer: this.state.answer.slice(0, -1)\n      });\n    };\n\n    this.state = {\n      answer: \"\"\n    };\n  }\n  /*this controls what option is clicked to be activated and \n    provide it's provided functionality*/\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"calc-body\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Calculator App from Aedan\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ResultCom, {\n          answer: this.state.answer\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Calculator, {\n          onClick: this.onClick\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/theorder/Desktop/simple-calc/src/App.js"],"names":["React","Component","ResultCom","Calculator","App","constructor","onClick","button","compute","reset","backspace","setState","answer","state","eval","e","slice","render"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA;AACA;AACA;;AACA,OAAO,WAAP;AACA;AACA;AACA;AACA;;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA;AACA;AACA;;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AAEA;AACA;AACA;;AAEA,MAAMC,GAAN,SAAkBH,SAAlB,CAA4B;AAC1BI,EAAAA,WAAW,GAAE;AACX;AAEA;AACJ;;AAJe,SAYbC,OAZa,GAYHC,MAAM,IAAI;AAClB,UAAGA,MAAM,KAAK,GAAd,EAAkB;AAChB,aAAKC,OAAL,GADgB,CACI;AACA;AACrB,OAHD,MAGO,IAAGD,MAAM,KAAK,GAAd,EAAmB;AACxB,aAAKE,KAAL;AAAoB;AACrB,OAFM,MAEA,IAAGF,MAAM,KAAK,IAAd,EAAmB;AACxB,aAAKG,SAAL;AAAoB;AACrB,OAFM,MAEA;AACL,aAAKC,QAAL,CAAc;AAAM;AAC1B;AACQC,UAAAA,MAAM,EAAE,KAAKC,KAAL,CAAWD,MAAX,GAAoBL;AAFhB,SAAd;AAID;AACF,KA1BY;;AAAA,SA6BbC,OA7Ba,GA6BH,MAAM;AACd,UAAI;AACF,aAAKG,QAAL,CAAc;AACZC,UAAAA,MAAM,EAAE,CAACE,IAAI,CAAC,KAAKD,KAAL,CAAWD,MAAZ,CAAJ,IAA2B,EAA5B,IAAkC;AAD9B,SAAd;AAGD,OAJD,CAIE,OAAOG,CAAP,EAAU;AACV,aAAKJ,QAAL,CAAc;AACZC,UAAAA,MAAM,EAAE;AADI,SAAd;AAGD;AACF,KAvCY;;AAAA,SAyCbH,KAzCa,GAyCL,MAAM;AACZ,WAAKE,QAAL,CAAc;AACZC,QAAAA,MAAM,EAAE;AADI,OAAd;AAGD,KA7CY;;AAAA,SA+CbF,SA/Ca,GA+CD,MAAM;AAChB,WAAKC,QAAL,CAAc;AACZC,QAAAA,MAAM,EAAE,KAAKC,KAAL,CAAWD,MAAX,CAAkBI,KAAlB,CAAwB,CAAxB,EAA2B,CAAC,CAA5B;AADI,OAAd;AAGD,KAnDY;;AAKX,SAAKH,KAAL,GAAa;AACXD,MAAAA,MAAM,EAAE;AADG,KAAb;AAGD;AAED;AACF;;;AA0CEK,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA,6BACE;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA,gCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,SAAD;AAAW,UAAA,MAAM,EAAE,KAAKJ,KAAL,CAAWD;AAA9B;AAAA;AAAA;AAAA;AAAA,gBAFF,eAGE,QAAC,UAAD;AAAY,UAAA,OAAO,EAAE,KAAKN;AAA1B;AAAA;AAAA;AAAA;AAAA,gBAHF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AASD;;AAhEyB;;AAmE5B,eAAeF,GAAf","sourcesContent":["/*\n  this will allow me to utilize the component functionality for when everything is \n  being rendered to the screen\n*/\nimport React, {Component} from 'react'\n/*\n  contains extra styling for this application\n*/\nimport './App.css';\n/*\n  importing the answer functionality that will be utilized for rendering the \n  result from the computattion\n*/\nimport ResultCom from './components/ResultCom'\n/*\n  This is the physical calculator that is rendered to the screen\n*/\nimport Calculator from './components/Calculator'\n\n/*\n  Rather than having a design that is functional \n*/\n\nclass App extends Component {\n  constructor(){\n    super();\n\n    /*this sets the state for the answer that will be computed \n      by the calculator*/\n    this.state = {\n      answer: \"\"\n    }\n  }\n\n  /*this controls what option is clicked to be activated and \n    provide it's provided functionality*/\n  onClick = button => {\n    if(button === \"=\"){\n      this.compute()      // this takes the current equation with numbers \n                          // and performs the operation\n    } else if(button === \"C\") {\n      this.reset()        /*this function call to reset*/\n    } else if(button === \"CE\"){\n      this.backspace()    /*this function call to reset*/\n    } else {\n      this.setState({     /* this takes the value of the answer in its state \n                              places it into the new state*/\n        answer: this.state.answer + button\n      })\n    }\n  };\n\n  /* responsible for */\n  compute = () => {\n    try {\n      this.setState({\n        answer: (eval(this.state.answer) || \"\") + \"\"\n      })\n    } catch (e) {\n      this.setState({\n        answer: \"error\"\n      })\n    }\n  };\n\n  reset = () => {\n    this.setState({\n      answer: \"\"\n    })\n  };\n\n  backspace = () => {\n    this.setState({ \n      answer: this.state.answer.slice(0, -1)\n    })\n  };\n  \n  render() {\n    return (\n      <div>\n        <div className=\"calc-body\">\n          <h1>Calculator App from Aedan</h1>\n          <ResultCom answer={this.state.answer}/>\n          <Calculator onClick={this.onClick}/>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}